#!/usr/bin/env python

import libdircmp
import argparse
import re
import time
import sys
import json
import os

def find( pattern, directory, index, commonRootLen, args ):
    color_green = '\033[92m'
    color_red   = '\033[91m'
    color_blue = '\033[94m'
    color_brown = '\033[0;33m'
    color_end   = '\033[0m'

    print( "searching %s..." % pattern )
    lastOutput = time.time()
    counter = 0
    regex = re.compile( pattern )
    findings = []
    for path in index:
        fileId = index[path]
        match = regex.search( fileId['path'] )
        if match:
            groups = []
            groupCount =  len( match.groups() )
            for i in range( 1, groupCount+1 ):
                if match.start(i) != -1:
                    groups.append( match.span(i) )
            if not groups:
                groups.append( match.span() )
            findings.append( (fileId, groups) )

        counter += 1
        if time.time() - lastOutput > 10:
            print( '%i/%i...' % (counter, len(index)) )
            lastOutput = time.time()
    findings = sorted( findings, key = lambda s: s[0]['path'].lower() )
    print( "results:" )
    directoriesFound = []
    for finding in findings:
        fileId = finding[0]
        groups = finding[1]
        path = fileId['path']

        if fileId['isDir']: directoriesFound.append( path + '/' )

        normalColor = color_brown if fileId['isDir'] else color_blue
        text = ''
        if groups[0][0] == 0 and groups[0][1] == len( path ): # match everything -> do not colorize
            index = commonRootLen
        else:
            firstGroupIndex = groups[0][0]
            index = 0 if firstGroupIndex < commonRootLen else commonRootLen
            for group in groups:
                if index < group[0]: text += normalColor + path[index:group[0]] + color_end
                text += color_green + path[group[0]:group[1]] + color_end
                index = group[1]
        text += normalColor
        if index < len(path): text += path[index:]
        if fileId['isDir']: text += '/'
        text += color_end
        print( '%s (%s)' % (text, libdircmp.formatBytes( fileId['size'] )) )
    print( "%s%i%s results found (%i files, %i directories)." % (color_red, len(findings), color_end, len(findings)-len(directoriesFound), len(directoriesFound)) )
    print( "calculating size..." )
    size_all = 0
    size_files = 0
    for finding in findings:
        fileId = finding[0]
        path = fileId['path']
        alreadyIncluded = False
        for d in directoriesFound:
            if path[:len(d)] == d:
                alreadyIncluded = True
                break
        if not fileId['isDir']:
            size_files += fileId['size']
        if not alreadyIncluded:
            size_all += fileId['size']
    print( "total size: %s%s%s" % (color_red, libdircmp.formatBytes( size_all ), color_end) )
    if size_all != size_files:
        print( "files only: %s%s%s" % (color_red, libdircmp.formatBytes( size_files ), color_end) )

def hashAllFileContents( index, directory, filename, sources ):
    print( 'hashing file contents...' )
    lastOutput = time.time()
    lastSave = time.time()
    lastCount = 0
    lastBytes = 0
    totalFileCount = sum( not index[path]['isDir'] for path in index )
    totalFileSize = sum( directory[name]['size'] for name in directory )
    totalFileSizeString = libdircmp.formatBytes( totalFileSize )
    itemCounter = 0
    byteCounter = 0

    contentHashes = {}
    if os.path.isfile( filename ):
        print( 'loading hashes from %s...' % filename )
        contentHashes = json.load( open( filename, 'r' ) )

    for path in index:
        fileId = index[path]
        if not fileId['isDir']:
            libdircmp.hashFileContents( fileId, sources, contentHashes )
            itemCounter += 1
            byteCounter += fileId['size']

        timeElapsed = time.time() - lastOutput
        if timeElapsed > 10: # each 10 sec
            itemSpeed = (itemCounter - lastCount)/timeElapsed
            byteSpeed = (byteCounter - lastBytes)/timeElapsed
            etaByItems = (totalFileCount - itemCounter)/itemSpeed if itemSpeed != 0.0 else 0.0
            etaByBytes = (totalFileSize - byteCounter)/byteSpeed if byteSpeed != 0.0 else 0.0
            print( '%i/%i, %.2f/s, ETA %s (%s/%s, %s/s, ETA %s)...' % (
                itemCounter, totalFileCount,
                itemSpeed, libdircmp.formatSeconds( etaByItems ),
                libdircmp.formatBytes( byteCounter ), totalFileSizeString,
                libdircmp.formatBytes( byteSpeed ), libdircmp.formatSeconds( etaByBytes )
                ) )
            lastOutput = time.time()
            lastCount = itemCounter
            lastBytes = byteCounter

            if time.time() - lastSave > 60*30: # each 30 min
                print( 'saving hashes so far to %s...' % filename )
                json.dump( contentHashes, open( filename, 'w' ), indent = 4 )
                print( 'hashes saved. going on...' )
                lastSave = time.time()

    print( 'saving hashes to %s...' % filename )
    json.dump( contentHashes, open( filename, 'w' ), indent = 4 )

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument( 'path', help = 'directory or json file' )
    parser.add_argument( '--find', help = 'find paths (regex match)' )
    parser.add_argument( '--only', action = 'append', help = 'include paths (exact match); only on directory scans' )
    parser.add_argument( '--skip', action = 'append', help = 'exclude paths (exact match); only on directory scans' )
    parser.add_argument( '--save', help = 'only on directory scans' )
    parser.add_argument( '--exclude', action = 'append', help = 'exclude paths (regex match)' )
    parser.add_argument( '--include', action = 'append', help = 'include paths only (regex match)' )
    parser.add_argument( '--hash', help = 'hash all files and save them here' )
    parser.add_argument( '--source', action = 'append', help = 'data source for hashing, may be old::new' )
    args = parser.parse_args()

    if args.find and args.hash:
        print( "Error: --find and --hash are distinct operations." )
        sys.exit( 1 )

    if args.source and not args.hash:
        print( "Error: --source works only with --contents." )
        sys.exit( 1 )

    (directory, index, commonRoot) = libdircmp.scan(
        args.path, None, '', args.save, args
        )

    if args.find:
        find( args.find, directory, index, len(commonRoot), args )
    elif args.hash:
        sources = libdircmp.getSources( args.source, commonRoot )
        hashAllFileContents( index, directory, args.hash, sources )

if __name__ == "__main__":
    main()